syntax = "proto3";

option java_package = "com.inforeach.eltrader.tms.api.grpc";

import "TMSRemoteCommon.proto";

// Contains requests sent to the TMS

//START SNIPPET: CreateMarketPortfolioRequest
enum PortfolioType {
    UNDEFINED = 0; // default
    Index = 1;
    Market = 2;
    Linked = 3;
    Correlated = 4;
    Dynamic = 5;
    option allow_alias = true;
    Pure = 2; // alias to Market for backward compatibility
}

message CreateMarketPortfolioRequest {
    string name = 1; //Unique name of the new portfolio
    PortfolioType type = 2; //A type of the portfolio, required field.
    Fields fields = 3; //Fields to be set in the new portfolio
}
//END SNIPPET: CreateMarketPortfolioRequest

//START SNIPPET: ModifyPortfolioRequest
message ModifyPortfolioRequest {
    string name = 1; //A name of the existing portfolio.
    Fields fields = 2; //Fields to modify in the portfolio.
}
//END SNIPPET: ModifyPortfolioRequest

//START SNIPPET: RemovePortfolioRequest
message RemovePortfolioRequest {
    string name = 1; //A name of the existing portfolio.
}
//END SNIPPET: RemovePortfolioRequest

//START SNIPPET: AddTargetsRequest
message AddMarketTargetsRequest {
    string portfolio = 1; //A name of the portfolio to add targets to.
    repeated Fields fields = 2; //Fields of the added target(s)
    bool tradeAtOnce = 3; // Set it to "true" if created targets should be sent to market right away
}
//END SNIPPET: AddTargetsRequest

message AddTargetsRequest {
    string portfolio = 1; //A name of the portfolio to add targets to.
    repeated Fields fields = 2; //Fields of the added target(s)
}

//START SNIPPET: ModifyTargetsRequest
// Note: if some string field has to be set to null value, need to use "<NULL>" constant for it
message ModifyTargetsRequest {
    repeated int64 targetId = 1; //Id(s) of the target(s) to modify (target ids returned when new targets are added).
    repeated Fields fields = 2; //If only one fields container - all targets will be modified with it. Otherwise there must be a field container per target.
}
//END SNIPPET: ModifyTargetsRequest

//START SNIPPET: TargetStatusRequests
message TerminateMarketTargetsRequest {
    repeated int64 targetId = 1; //Id(s) of the target(s) to terminate (target ids returned when new targets are added).
    bool cancelOpenOrders = 2; //indicates whether all open outstanding (sent to market) orders for specified targets should be canceled
}

message PauseMarketTargetsRequest {
    repeated int64 targetId = 1;//Id(s) of the target(s) to pause (target ids returned when new targets are added).
    bool cancelOpenOrders = 2; //indicates whether all open outstanding (sent to market) orders for specified targets should be canceled
}

message ResumeMarketTargetsRequest {
    repeated int64 targetId = 1;//Id(s) of the target(s) to resume (target ids returned when new targets are added).
}
//END SNIPPET: TargetStatusRequests

message ReleaseAggregatedStatedTargetsRequest {
    string marketPortfolio = 1; // Name of market portfolio to release targets
    repeated int64 targetId = 2;//Id(s) of the aggregated target(s) to release
}

message AcceptPreStagedTargets {
    repeated string stagedPortfolio = 1; // Name(s) of staged portfolio to accept targets
    repeated int64 targetId = 2; //Id(s) of the staged target(s) to accept. Use empty set if all targets from specified portfolios should be accepted
}

//START SNIPPET: SendTargetWaveRequest
//targetIds and messages must match each others count
//fields should contain either single fields container (i.e. length is 1) to be applied to all targets or should be of the same size as targetIds
message SendTargetWaveRequest {
    repeated int64 targetId  = 1;
    repeated FIXFields message = 2;
    repeated Fields fields = 3;
    bool modifyTargets = 4;
}
//END SNIPPET: SendTargetWaveRequest

//START SNIPPET: SendOrderRequest
// Can have
// - only message(s) for non-target order sending
// - only target ids for sending orders of those targets
// - or both, in this case their count must match, and each message is sent for the corresponding target
message SendOrdersRequest {
    repeated int64 targetId  = 1;
    repeated FIXFields message = 2;
}
//END SNIPPET: SendOrderRequest


//START SNIPPET: ModifyOrderRequest
//orderIds and messages must match each others count
message ModifyOrdersRequest {
    repeated string orderId  = 1;
    repeated FIXFields message = 2;
}
//END SNIPPET: ModifyOrderRequest


//START SNIPPET: CancelOrderRequest
//Messages are optional. If specified their count must match the orderIds count.
message CancelOrdersRequest {
    repeated string orderId  = 1;
    repeated FIXFields message = 2;
}
//END SNIPPET: CancelOrderRequest

//START SNIPPET: OrderStatusRequests
message ConfirmOrdersRequest {
    repeated FIXFields message = 1;
    bool outPreviousRequests = 2;
}

message OutOnOrdersRequest {
    repeated FIXFields message = 1;
    bool updateBrokerOrders = 2;
}

message StatusOrdersRequest {
    repeated FIXFields message = 1;
    bool updateBrokerOrders = 2;
}
//END SNIPPET: OrderStatusRequests

message CrossMarketTargetsRequest {
    int64 buyTargetId = 1;
    int64 sellTargetId = 2;
    double quantity = 3;
    double price = 4;
}

//START SNIPPET: CreateStagedPortfolioRequest
message CreateStagedPortfolioRequest {
    string name = 1; //Unique name of the new portfolio
    string clientName = 2; //Name of the client (optional)
    string marketPortfolioForAutoRelease = 3; // Name of market portfolio for auto-release (optional)
    Fields fields = 4; //Fields to be set in the new portfolio
}
//END SNIPPET: CreateStagedPortfolioRequest

message SubscribeForPortfoliosRequest {
    bool skipRecordUpdates = 1; //Set it to "true" in case listener is not interested in record updates.
    string filter = 2; //Filtering expression. Events sent for portfolios matching the filter.
    repeated string field = 3;//Fields to be sent. All fields will be sent if not set.
}

//START SNIPPET: SubscribeForMarketTargetsRequest
message SubscribeForTargetsRequest {
    bool skipRecordUpdates = 1; //Set it to "true" in case listener is not interested in record updates.
    string filter = 2;  //Filtering expression. Events sent for targets matching the filter.
    repeated string field = 3; //Fields to be sent. All fields will be sent if not set.
}
//END SNIPPET: SubscribeForMarketTargetsRequest

message SubscribeForOrdersRequest {
    string filter = 1;  //Filtering expression. Events sent for orders matching the filter.
    repeated string field = 2; //Fields to be sent. All fields will be sent if not set.
}

message PortfolioNames {
    repeated string portfolioName = 1;
}

//START SNIPPET: TargetIds
message TargetIds {
    repeated int64 targetId = 1;
}
//END SNIPPET: TargetIds

message Portfolios {
    repeated Fields portfolio = 1;
}

message Targets {
    repeated Fields target = 1;
}