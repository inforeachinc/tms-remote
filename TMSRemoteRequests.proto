syntax = "proto3";

option java_package = "com.inforeach.eltrader.tms.api.grpc";

import "TMSRemoteCommon.proto";

// Contains requests sent to the TMS

message LoginRequest {
    string user = 1;
    string password = 2;
}

message PingInfo {
    repeated sfixed64 sendingTime = 1;
    int64 pingId = 2;
}

message Records {
    repeated Fields record = 1;
}

message SubscribeForInstrumentPositionsRequest {
    string categoryType = 1; //"Global" or empty for the global position instruments
    string categoryName = 2; //The name of the category, e.g. "Account1" for the categoryType="Account"
    string instrument = 3; //If empty will subscribe to all instruments in a category
}

//START SNIPPET: Positions API
message SetInstrumentPositionRequest {
    string instrument = 1;      // instrument of given position numbers
    string currency = 2;        // ccy in which instrument position values are expressed, typically that's primary currency for given instrument
    string categoryType = 3;    // category type to update instrument position for, can be empty if global instrument position numbers are provided
    string categoryName = 4;    // category name for given type to update instrument position for, can be empty if global instrument position numbers are provided
    double longQty = 5;         // long quantity for given instrument
    double longValue = 6;       // long cash (in given ccy) for given instrument - corresponds to long quantity, i.e. value spent to buy shares
    double shortQty = 7;        // short quantity for given instrument
    double shortValue = 8;      // short cash (in given ccy) for given instrument - corresponds to short quantity, i.e. value obtained from selling shares
    Fields customValues = 9;    // custom loaded values to be stored for instrument position
}
//END SNIPPET: Positions API

message SubscribeForCashPositionsRequest {
    string categoryType = 1; //"Global" or empty for the global position currencies
    string categoryName = 2;//The name of the category, e.g. "Account1" for the categoryType="Account"
    string currency = 3; //If empty will subscribe to all currencys in a category
}

message SubscribeForCategoryPositionsRequest {
    string categoryType = 1; //"Global" or empty for the global position
    string categoryName = 2;//The name of the category, e.g. "Account1" for the categoryType="Account"
}

message SubscribeForFIXMessagesRequest {
    repeated string connectionName = 1; // Name of the connection for messages to subscribe
    string filter = 2; // Filtering expression
    bool skipAppMessages = 3; // Set it to "true" in case listener is not interested in application messages
    bool skipAdminMessages = 4; // Set it to "true" in case listener is not interested in application messages
    repeated int32 field = 5; // Fields to be sent. All fields will be sent if not set.
    bool retrieveState = 6; // Set it to "true" in case listener is interested in previous messages.
}

// Allows subscribing from some particular message id(s).
// When recovering application is interested in receiving only not yet processed messages
// it needs to maintain MAX id (or last processed id) for each range of interest
// and use it when subscribing to FIX messages after recovery.
//
// There are 4 ranges: "application from", "application to", "admin from", "admin to"
//
// For example, if the application listens to both "from" and "to" application messages,
// it needs to keep maximum processed ids (last processed ids) for each of 2 ranges:
//  [INITIAL_APP_MESSAGE_TO_COUNTER_PARTY_ID .. MAX_APP_MESSAGE_TO_COUNTER_PARTY_ID]
//  [INITIAL_APP_MESSAGE_FROM_COUNTER_PARTY_ID ..  MAX_APP_MESSAGE_FROM_COUNTER_PARTY_ID]
//
// And when subscribing the restored last processed id to be used for the appropriate range:
// For example:
//      appLastProcessedFromCounterPartyId = 536871111 (belongs to "app from" range);
//      appLastProcessedToCounterPartyId = 500 (belongs to "app to" range);
//
//
// Note - if some id is not specified the messages for such ids are not streamed. E.g. if appLastProcessedFromCounterPartyId is not set
//        the application messages "from" will not be streaming.
//
message SubscribeForFIXMessagesFromRequest {
    enum Ids {
        SKIP = 0; //Messages will not be sent, default behavior

        RECEIVE_FROM_NOW = -2; //Only new messages will be streamed, i.e. from the subscription point

        INITIAL_APP_MESSAGE_TO_COUNTER_PARTY_ID     =         -1;
        MAX_APP_MESSAGE_TO_COUNTER_PARTY_ID         =  536870910;

        INITIAL_APP_MESSAGE_FROM_COUNTER_PARTY_ID   =  536870911;
        MAX_APP_MESSAGE_FROM_COUNTER_PARTY_ID       = 1073741822;

        INITIAL_ADMIN_MESSAGE_TO_COUNTER_PARTY_ID   = 1073741823;
        MAX_ADMIN_MESSAGE_TO_COUNTER_PARTY_ID       = 1342177278;

        INITIAL_ADMIN_MESSAGE_FROM_COUNTER_PARTY_ID = 1342177279;
        MAX_ADMIN_MESSAGE_FROM_COUNTER_PARTY_ID     = 1610612734;
    }


    string connectionName = 1; // Name of the connection for messages to subscribe
    string filter = 2; // Filtering expression
    repeated int32 field = 3; // Fields to be sent. All fields will be sent if not set.

    int32 appLastProcessedFromCounterPartyId = 4;
    int32 appLastProcessedToCounterPartyId = 5;
    int32 adminLastProcessedFromCounterPartyId = 6;
    int32 adminLastProcessedToCounterPartyId = 7;
}


message SubscribeForReportRequest {
    string domainManagerName = 1; // Name of the domain manager which manages the report
    string reportName = 2; // Name of the report to subscribe for data
    string level = 3; // Name of tree level to subscribe for level nodes data (is required for tree reports)
    string filter = 4; // Filtering expression
    repeated string field = 5; // Fields to be sent. All fields will be sent if not set.
}

message SubscribeForMarketDataRequest {
    repeated string instrument = 1; // Instrument(s) to subscribe
    repeated string field = 2; // Fields to be sent. All fields will be sent if not set.
}

message SubscribeForCustomDataRequest {
    string dataSourceName = 1; // Name of data source
    repeated string recordId = 2; // Record(s) to subscribe
    repeated string field = 3; // Fields to be sent. All fields will be sent if not set.
}

message SendCommandToCustomDataProvidersRequest {
    string dataSourceName = 1; // Name of data source
    repeated string providerName = 2; // Provider names (optional)
    string command = 3;
    Fields commandProperties = 4; // Command properties
}

message SubscribeForForexQuotesRequest {
    string facilityName = 1; // Name of facility
    string providerName = 2; // Name of provider, if not specified then request is sent to all providers.
    string symbol = 3;
    repeated string field = 4; // Fields to be sent. All fields will be sent if not set.

    oneof type {
        SpotType spot = 5;
        ForwardType forward = 6;
        NdfType ndf = 7;
        SwapType swap = 8;
    }

    message SpotType {
        string currency = 1;
        double quantity = 2;
    }

    message ForwardType {
        string currency = 1;
        double quantity = 2;
        int64 forwardDate = 3;
    }

    message NdfType {
        string currency = 1;
        double quantity = 2;
        int64 settlementDate = 3;
        string settlementCurrency = 4;
        int64 fixingDate = 5;
    }

    message SwapType {
        string nearCurrency = 1;
        double nearQuantity = 2;
        int64  nearDate= 3;
        string farCurrency = 4;
        double farQuantity = 5;
        int64  farDate = 6;
    }
}

//START SNIPPET: AlertsAPI
message PostAlertMessageRequest {
    repeated string user = 1; // List of users which should be notified about this alert
    repeated string userGroup = 2; // List of user groups which should be notified about this alert
    string type = 3; // Short description of the alert type, e.g. "Error", "Warning", etc. In TMS' GUI appears in the "Name" column of the "Alert Console".
    string description = 4; // Verbose description of the alert message or alert message itself. In TMS' GUI appears in the "Description" column of the "Alert Console".
    string details = 5; // Optional details for this alert message. In TMS' GUI appears on "React" button click in the "Alert Console".
    bool urgent = 6; // Indicates whether message is urgent. In TMS' GUI urgent alerts will show/bring "Alert Console" to front even if it's not configured to show/bring console to front on new alert.
}
//END SNIPPET: AlertsAPI

//START SNIPPET: ReportingAPI
message ReportFieldTypesRequest {
    string domainManagerName = 1; // Name of the domain manager which manages the report
    string reportName = 2; // Name of the report to subscribe for data
    string level = 3; // Name of tree level to subscribe for level nodes data
    string field = 4; // Name of field
}

message ReportRequest {
    string domainManagerName = 1; // Name of the domain manager which manages the report
    string reportName = 2; // Name of the report
}

message ReportAvailableResponse {
    bool available = 1;
}

message CreateReportRequest {
    string domainManagerName = 1; // Name of the domain manager which manages the report
    string reportSpec = 2; // XML representation of the report specification (is mutually exclusive with reportSpecResource parameter)
    string reportSpecResource = 3; // path to file with XML representation of the report specification (is mutually exclusive with reportSpec parameter)
}
//END SNIPPET: ReportingAPI

//START SNIPPET: SecurityMasterAPI
message InstrumentInfosRequest {
    repeated string instrument = 1;
}

message InstrumentInfosByAlternateIdRequest {
    string alternateIdSource = 1;
    string alternateInstrId = 2;
}

message InstrumentInfosResponse {
    repeated Fields instrumentInfo = 1;
}

message IdsResponse {
    repeated string id = 1;
}

message ExchangeInfosRequest {
    repeated string exchange = 1;
}

message ExchangeInfosResponse {
    repeated Fields exchangeInfo = 1;
}

message VolumeCurveRequest {
    string instrument = 1;
    int32 numberOfDays = 2; // optional
    int32 barIntervalInMinutes = 3; // optional
}

message VolumeCurveResponse {
    string instrument = 1;
    int32 numberOfDays = 2;
    int32 barIntervalInMinutes = 3;
    int64 startTimeOnly = 4;
    string timeZone = 5;
    string description = 6;
    double totalVolume = 7;
    repeated Bar bar = 8;
    
    message Bar {
        int64 startTime = 1;        
        double openPx = 2;
        double closePx = 3;
        double highPx = 4;
        double lowPx = 5;
        double volume = 6;
        double tradedValue = 7;
        double numOfTrades = 8;
        double volatility = 9;
        double avgQuotedSpread = 10;
        double avgEffectiveSpread = 11;
    }
}
//END SNIPPET: SecurityMasterAPI

message FIXMessagesRequest {
    repeated FIXFields message = 1;
}

message FIXConnectionMessagesRequest {
    string connectionName = 1;
    repeated FIXFields message = 2;
}
